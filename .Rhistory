---
title: "L1-Quarto"
---
title: "L1-Quarto"
#1. Create a Numeric Vector
# Create a vector called ages containing the ages of five people. Then compute the mean and standard deviation using mean() and sd().
ages <- c(15, 28, 65, 11, 30)
mean(ages)
sd(ages)
#2. Character Vector and Subsetting
# Create a vector called names with five names. Extract the second and fourth elements using indexing.
names <- c("Emma", "Giacomo", "Marco", "Aurora", "Alessandra")
names[2,4]
names[c(2,4)]
#3. Sequence and Repetition
# Use seq() to create a sequence from 1 to 10 by 2. Then use rep() to repeat the value "Hi" 3 times.
seq(from=1, to=10, by = 2)
rep("hi",3)
#4. Logical Conditions on Vectors
# Given a numeric vector x <- c(10, 20, 30, 40, 50), write a command to return the elements greater than 25.
x <- c(10, 20, 30, 40, 50)
x > 25
x[x>25]
x>25
#5. Combine Vectors and Coercion
# Create a vector that combines numbers and characters (e.g., c(1, 2, "three")) and check its type with typeof().
y <- c(1,2,"three","four",5, 6,"seven",8,9)
typeof(y)
#6. Named Vector
#Create a numeric vector with three elements and assign names to them using names(). Access one element by its name.
z <- c(1,10,6)
names(z[1]) <- tomato
names(z[1]) <- "tomato""
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
names(z[1]) <- "tomato"
names(z[1]) <- "potato"
names(z[1]) <- "tomato"
names(z[2]) <- "potato"
names(z[2]) <- "green"
names(z[3]) <- "yellow"
z
z[1]
tomato
"tomato""
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
"tomato"
names(z[1])
names("tomato") <- z[1]
z
names(z)
names(z[1])
names(z[1]) <- tomato
names(z[1]) <- "tomato"
names(z[1])
names(islands)
names(z)
names(z)
z <- list(a = 1, b = "c", c = 1:3)
names(z)
z <- c(a = 1, b = "c", c = 1:3)
names(z)
z <- c(tomato = 1, green = 2, yellow = 3)
names(z)
z(tomato)
z
z[1]
z(tomato)
z("tomato")
z[tomato]
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
gender <- c("male", "female", "female", "male", "female")
stringsAsFactors = TRUE
levels(gender)
gender:stringsAsFactors = TRUE
stringsAsFactors(gender) = TRUE
levels(gender)
as.factor(gender)
gender <- c("male", "female", "female", "male", "female")
as.factor(gender)
levels(gender)
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
gender <- c("male", "female", "female", "male", "female")
as.factor(gender)
levels(gender)
levels(as.factor(gender))
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:3, byrow = TRUE)
X
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:9, byrow = TRUE)
X
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:9, row = 3, column =3, byrow = TRUE)
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:9, nrow = 3, ncol =3, byrow = TRUE)
X
X[,2]
str(gender)
#9. Create a List
#Build a list named student that contains a name (character), age (numeric), and passed (logical). Use str() to inspect it.
student <- list("Giovanna", 25, TRUE)
str(student)
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student$1
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student$name
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student([[1]])
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student([1])
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student[1]
student$chr
student$chr[c(1)]
student$[c(1)]
student$chr
student$names
