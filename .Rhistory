---
title: "L1-Quarto"
---
title: "L1-Quarto"
#1. Create a Numeric Vector
# Create a vector called ages containing the ages of five people. Then compute the mean and standard deviation using mean() and sd().
ages <- c(15, 28, 65, 11, 30)
mean(ages)
sd(ages)
#2. Character Vector and Subsetting
# Create a vector called names with five names. Extract the second and fourth elements using indexing.
names <- c("Emma", "Giacomo", "Marco", "Aurora", "Alessandra")
names[2,4]
names[c(2,4)]
#3. Sequence and Repetition
# Use seq() to create a sequence from 1 to 10 by 2. Then use rep() to repeat the value "Hi" 3 times.
seq(from=1, to=10, by = 2)
rep("hi",3)
#4. Logical Conditions on Vectors
# Given a numeric vector x <- c(10, 20, 30, 40, 50), write a command to return the elements greater than 25.
x <- c(10, 20, 30, 40, 50)
x > 25
x[x>25]
x>25
#5. Combine Vectors and Coercion
# Create a vector that combines numbers and characters (e.g., c(1, 2, "three")) and check its type with typeof().
y <- c(1,2,"three","four",5, 6,"seven",8,9)
typeof(y)
#6. Named Vector
#Create a numeric vector with three elements and assign names to them using names(). Access one element by its name.
z <- c(1,10,6)
names(z[1]) <- tomato
names(z[1]) <- "tomato""
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
names(z[1]) <- "tomato"
names(z[1]) <- "potato"
names(z[1]) <- "tomato"
names(z[2]) <- "potato"
names(z[2]) <- "green"
names(z[3]) <- "yellow"
z
z[1]
tomato
"tomato""
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
"tomato"
names(z[1])
names("tomato") <- z[1]
z
names(z)
names(z[1])
names(z[1]) <- tomato
names(z[1]) <- "tomato"
names(z[1])
names(islands)
names(z)
names(z)
z <- list(a = 1, b = "c", c = 1:3)
names(z)
z <- c(a = 1, b = "c", c = 1:3)
names(z)
z <- c(tomato = 1, green = 2, yellow = 3)
names(z)
z(tomato)
z
z[1]
z(tomato)
z("tomato")
z[tomato]
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
gender <- c("male", "female", "female", "male", "female")
stringsAsFactors = TRUE
levels(gender)
gender:stringsAsFactors = TRUE
stringsAsFactors(gender) = TRUE
levels(gender)
as.factor(gender)
gender <- c("male", "female", "female", "male", "female")
as.factor(gender)
levels(gender)
#7. Create a Factor Variable
# Create a factor called gender with the values c("male", "female", "female", "male", "female"). Check its levels using levels().
gender <- c("male", "female", "female", "male", "female")
as.factor(gender)
levels(gender)
levels(as.factor(gender))
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:3, byrow = TRUE)
X
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:9, byrow = TRUE)
X
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:9, row = 3, column =3, byrow = TRUE)
#8. Build a Matrix
# Create a 3×3 matrix containing numbers from 1 to 9 using matrix(). Fill it by row and extract the second column.
X <- matrix(1:9, nrow = 3, ncol =3, byrow = TRUE)
X
X[,2]
str(gender)
#9. Create a List
#Build a list named student that contains a name (character), age (numeric), and passed (logical). Use str() to inspect it.
student <- list("Giovanna", 25, TRUE)
str(student)
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student$1
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student$name
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student([[1]])
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student([1])
#10. Access List Elements
# From the list student, extract only the name using $ and double square brackets ([[ ]]). Try both methods.
student[1]
student$chr
student$chr[c(1)]
student$[c(1)]
student$chr
student$names
str(data)
data <- read.csv("data/dataset.csv")
str(data)
summary(data)
`Therefore, this would be a code, if I would have any...`
#| out-width: 50%
#| fig-align: center
#| fig-cap: A baby with a nirs cap
#| fig-cap-location: bottom
#| label: fig-bb
knitr::include_graphics("img/bb.png")
#| out-width: 20%
#| fig-align: center
#| fig-cap: A baby with a nirs cap
#| fig-cap-location: bottom
#| label: fig-bb
knitr::include_graphics("img/bb.png")
#| out-width: 20%
#| fig-align: left
#| fig-cap: A baby with a nirs cap
#| fig-cap-location: bottom
#| label: fig-bb
knitr::include_graphics("img/bb.png")
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot2(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
library(ggplot2)
library(ggplot2)
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot2(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
library(ggplot2)
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
library(ggplot2)
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
```{r}
library(ggplot2)
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-mtcars1
ggplot(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
install.packages("kableExtra")
library(kableExtra)
kable(ChickWeight) %>%
scroll_box(height = "450px", width = "100%")
kable(summary(ChickWeight)) %>%
scroll_box(height = "450px", width = "100%")
#| lst-label: lst-tablecode
#| lst-cap: Code use to generate the previous table
kable(summary(ChickWeight)) %>%
scroll_box(height = "200px", width = "100%")
#| lst-label: lst-tablecode
#| lst-cap: Code use to generate the previous table
#| eval: false
kable(summary(ChickWeight)) %>%
scroll_box(height = "200px", width = "100%")
#| lst-label: lst-tablecode
#| lst-cap: Code use to generate the previous table
#| eval: false
kable(summary(ChickWeight)) %>%
scroll_box(height = "200px", width = "100%")
#| lst-label: lst-tablecode
#| lst-cap: Code use to generate the previous table
#| eval: false
kable(summary(ChickWeight)) %>%
scroll_box(height = "200px", width = "100%")
[](data/dataset.csv)
str(data)
summary(data)
View(data)
plot(x = data$mindfulness,
y = data$anxiety,
type = "p",
col = "purple",
pch = 16,
xlab = "Mindfulness"
ylab = "Anxiety Level"
plot(x = data$mindfulness,
y = data$anxiety,
type = "p",
col = "purple",
pch = 16,
xlab = "Mindfulness"
ylab = "Anxiety Level")
plot(x = data$mindfulness,
y = data$anxiety,
type = "p",
col = "purple",
pch = 16)
ggplot(data,
aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
ggplot(data,
aes(anxiety, color = factor(mindfulness))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
ggplot(data,
aes(anxiety, color = factor(mindfulness))) +
geom_point() +
theme(legend.position = 'bottom')
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point() +
theme(legend.position = 'bottom')
#| eval: false
#| fig-column: margin
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point() +
theme(legend.position = 'bottom')
kable(summary(data))
#| eval: true
#| fig-column: margin
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point() +
theme(legend.position = 'bottom')
kable(summary(data))
ggplot(data,
aes(anxiety, flexibility, size = gear)) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness)) +
geom_point()
ggplot(data,
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness)) +
geom_point()
```{r}
```{r}
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
```{r}
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
#| label: fig-plotsModels
#| column: screen-inset-shaded
#| layout-nrow: 2
#| layout-ncol: 2
#| fig-cap: "One dataset, different models"
#| fig-subcap:
#|   - "The data"
#|   - "Polynomial"
#|   - "Linear Model"
#|   - "GLM with Poisson"
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
geom_smooth()
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
geom_smooth(method = "lm")
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
geom_smooth(method = "glm", method.args = list(family = "poisson"))
#| label: fig-plotsModels
#| column: screen-inset-shaded
#| layout-nrow: 2
#| layout-ncol: 2
#| fig-cap: "One dataset, different models"
#| fig-subcap:
#|   - "Mindfulness"
#|   - "Activity"
#|   - "Mindfulness"
#|   - "Activity"
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, color = factor(activity))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, shape = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, shape = factor(activity))) +
geom_point()
#| label: fig-plotsModels
#| fig-align: center
#| out-width: 20%
#| column: screen-inset-shaded
#| layout-nrow: 2
#| layout-ncol: 2
#| fig-cap: "One dataset, different graphical representations"
#| fig-subcap:
#|   - "Mindfulness a"
#|   - "Activity a"
#|   - "Mindfulness b"
#|   - "Activity b"
ggplot(data,
aes(anxiety, flexibility, color = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, color = factor(activity))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, shape = factor(mindfulness))) +
geom_point()
ggplot(data,
aes(anxiety, flexibility, shape = factor(activity))) +
geom_point()
#| out-width: 50%
#| fig-align: center
#| fig-cap: A graph from `mtcars`
#| fig-cap-location: margin
#| label: fig-plot1
#| code-summary: look how we directly plotted in Quarto (of course I copied Ottavia's code)
ggplot(mtcars, aes(hp, mpg, color = factor(am))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess") +
theme(legend.position = 'bottom')
kable(data)
kable(head(data))
#| label: tbl-tables
#| tbl-cap: "Datasets"
#| tbl-subcap:
#|   - "Data"
#|   - "DataSummary"
#| layout-ncol: 2
#|
kable(head(data))
kable(summary(data))
#| label: tbl-tables
#| tbl-cap: "Datasets"
#| tbl-subcap:
#|   - "Data"
#|   - "DataSummary"
#| layout-ncol: 2
#|
kable(head(data))
kable(summary(data))
mean(data$anxiety)
#| eval: true
#| line
ggplot(data, # <1>
aes(anxiety, flexibility, color = factor(mindfulness))) + # <2>
geom_point() + # <3>
theme(legend.position = 'bottom') # <4>
library(ggplot2)
mtcars %>%
ggplot( aes(mpg, hp)) +
geom_point()
library(tidyverse)
mtcars %>%
ggplot( aes(mpg, hp)) +
geom_point()
#| include: false
install.packages("plotly")
#| include: false
library(plotly)
#| include: false
install.packages("shiny")
install.packages("shiny")
shinyApp(ui, server)
ui = fluidPage(
selectInput(inputId = "mySelection",
label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
verbatimTextOutput(
outputId = "myOutput"
)
)
#| include: false
library(shiny)
ui = fluidPage(
selectInput(inputId = "mySelection",
label = h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
verbatimTextOutput(
outputId = "myOutput"
)
)
server = function(input, output) {
output$myOutput = renderText({
paste(paste("This is my choice"), input$mySelection)
})
}
shinyApp(ui, server)
```{r}
#| panel: sidebar
#| eval: false
selectInput(inputId = "dataset", # name of the input (for the server)
label = "Choose a dataset:", # name of the input (for the users)
choices = c("rock", "pressure", "cars")) # options (for  both
# users & server)
library(shiny)
shinyApp(ui, server)
ui = fluidPage(
checkboxInput("checkbox", label = "Choice A", value = TRUE),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
)
server = function(input, output) {
output$value <- renderPrint({ input$checkbox })
}
shinyApp(ui, server)
runApp('Shiny.R')
runApp('Shiny.R')
